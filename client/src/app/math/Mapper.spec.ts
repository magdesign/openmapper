import {expect} from "chai";
import "mocha";
import {DimensionTransformer} from "./DimensionTransformer";
import {Edges} from "./Edges";
import {Indices} from "./Indices";
import {Mapper} from "./Mapper";

describe("DimensionTransformer", () => {
    describe("fromFloatArrayToDimension()", () => {
        it("should filter edges", () => {
            const expected = [
                {x: 0, y: 0, z: 0},
                {x: 0, y: 0.6666666666666666, z: 0},
                {x: 0, y: 1.3333333333333333, z: 0},
                {x: 0, y: 2, z: 0},
                {x: 0.6666666666666666, y: 0, z: 0},
                {x: 0.6666666666666666, y: 0.6666666666666666, z: 0},
                {x: 0.6666666666666666, y: 1.3333333333333333, z: 0},
                {x: 0.6666666666666666, y: 2, z: 0},
                {x: 1.3333333333333333, y: 0, z: 0},
                {x: 1.3333333333333333, y: 0.6666666666666666, z: 0},
                {x: 1.3333333333333333, y: 1.3333333333333333, z: 0},
                {x: 1.3333333333333333, y: 2, z: 0},
                {x: 2, y: 0, z: 0},
                {x: 2, y: 0.6666666666666666, z: 0},
                {x: 2, y: 1.3333333333333333, z: 0},
                {x: 2, y: 2, z: 0},
            ];

            const result = new Float32Array([
                0, 0, 0,
                0, 0.6666666865348816, 0,
                0, 1.3333333730697632, 0,
                0, 2, 0,
                0.6666666865348816, 0, 0,
                0.6666666865348816, 0.6666666865348816, 0,
                0.6666666865348816, 1.3333333730697632, 0,
                0.6666666865348816, 2, 0,
                1.3333333730697632, 0, 0,
                1.3333333730697632, 0.6666666865348816, 0,
                1.3333333730697632, 1.3333333730697632, 0,
                1.3333333730697632, 2, 0,
                2, 0, 0,
                2, 0.6666666865348816, 0,
                2, 1.3333333730697632, 0,
                2, 2, 0,
            ]);

            const values = DimensionTransformer.fromFloatArrayToDimension(result);
        });
    });
});

describe("Edges", () => {
    describe("getEdges()", () => {
        it("should filter edges", () => {

            const vert = Mapper.vertices(3, 3);
            const result = Edges.getEdges(vert);

            const expected = [
                {x: 0, y: 0, z: 0},
                {x: 0, y: 3, z: 0},
                {x: 3, y: 0, z: 0},
                {x: 3, y: 3, z: 0},
            ];
            expect(expected).to.be.deep.equal(result);
        });

        it("should filter edges with more values", () => {
            const vert = Mapper.vertices(5, 3);
            const result = Edges.getEdges(vert);

            const expected = [
                {x: 0, y: 0, z: 0},
                {x: 0, y: 3, z: 0},
                {x: 3, y: 0, z: 0},
                {x: 3, y: 3, z: 0},
            ];
            expect(expected).to.be.deep.equal(result);
        });
    });
});

describe("Indices", () => {
    describe("calcIndices()", () => {
        it("should indice with 2", () => {
            const expected = [
                0, 2, 1,
                1, 2, 3,
            ];

            const actual = Indices.calcIndices(2);
            expect(expected).to.be.deep.equal(actual);
        });

        it("should indice with 3", () => {
            const expected = [
                0, 3, 1,
                1, 3, 4,
                1, 4, 2,
                2, 4, 5,
                3, 6, 4,
                4, 6, 7,
                4, 7, 5,
                5, 7, 8,
            ];

            const actual = Indices.calcIndices(3);
            expect(expected).to.be.deep.equal(actual);
        });
    });
});

describe("Mapper", () => {
    describe("uv()", () => {
        it("should generate uv", () => {
            const result = Mapper.uv(2);
            const expected = [
                {x: 0, y: 0, z: 0},
                {x: 0, y: 1, z: 0},
                {x: 1, y: 0, z: 0},
                {x: 1, y: 1, z: 0},
            ];
            expect(expected).to.be.deep.equal(result);
        });
    });

    describe("vertices()", () => {

        it("should generate vertices 4", () => {
            const expected = [
                {x: 0, y: 0, z: 0},
                {x: 0, y: 0.6666666666666666, z: 0},
                {x: 0, y: 1.3333333333333333, z: 0},
                {x: 0, y: 2, z: 0},
                {x: 0.6666666666666666, y: 0, z: 0},
                {x: 0.6666666666666666, y: 0.6666666666666666, z: 0},
                {x: 0.6666666666666666, y: 1.3333333333333333, z: 0},
                {x: 0.6666666666666666, y: 2, z: 0},
                {x: 1.3333333333333333, y: 0, z: 0},
                {x: 1.3333333333333333, y: 0.6666666666666666, z: 0},
                {x: 1.3333333333333333, y: 1.3333333333333333, z: 0},
                {x: 1.3333333333333333, y: 2, z: 0},
                {x: 2, y: 0, z: 0},
                {x: 2, y: 0.6666666666666666, z: 0},
                {x: 2, y: 1.3333333333333333, z: 0},
                {x: 2, y: 2, z: 0},
            ];
            const result = Mapper.vertices(4, 2);
            expect(expected).to.be.deep.equal(result);
        });
    });

    describe("map()", () => {
        it("should shift vertices one to bottom left", () => {
            const expected = [
                {x: 0, y: 0, z: 0},
                {x: 0, y: 1, z: 0},
                {x: 0, y: 2, z: 0},
                {x: 0, y: 3, z: 0},
                {x: 1, y: 0, z: 0},
                {x: 1.1111111111111112, y: 1.1111111111111112, z: 0},
                {x: 1.222222222222222, y: 2.2222222222222223, z: 0},
                {x: 1.3333333333333333, y: 3.3333333333333335, z: 0},
                {x: 2, y: 0, z: 0},
                {x: 2.2222222222222223, y: 1.222222222222222, z: 0},
                {x: 2.444444444444444, y: 2.444444444444444, z: 0},
                {x: 2.6666666666666665, y: 3.6666666666666665, z: 0},
                {x: 3, y: 0, z: 0},
                {x: 3.3333333333333335, y: 1.3333333333333333, z: 0},
                {x: 3.6666666666666665, y: 2.6666666666666665, z: 0},
                {x: 4, y: 4, z: 0},
            ];

            const points = [
                {x: 0, y: 0, z: 0},
                {x: 0, y: 3, z: 0},
                {x: 3, y: 0, z: 0},
                {x: 4, y: 4, z: 0},
            ];

            const result = Mapper.map(4, points[0], points[1], points[2], points[3]);
            expect(expected).to.be.deep.equal(result);
        });

        // The tests marc wrote, in hope they work

        it("should shift all vertices", () => {
            const expected = [
                {x: -0.28774762049211333, y: -0.4412129844260258, z: 0},
                {x: -3.357055572407958, y: 1.7345299767992155, z: 0},
                {x: -6.426363524323802, y: 3.9102729380244567, z: 0},
                {x: -9.495671476239648, y: 6.086015899249697, z: 0},

                {x: 1.031146985956672, y: -1.3556109086712627, z: 0},
                {x: -0.3841450140934106, y: 1.0567245224635853, z: 0},
                {x: -1.7994370141434937, y: 3.469059953598433, z: 0},
                {x: -3.214729014193577, y: 5.881395384733281, z: 0},

                {x: 2.3500415924054576, y: -2.2700088329164996, z: 0},
                {x: 2.5887655442211366, y: 0.37891906812795595, z: 0},
                {x: 2.827489496036815, y: 3.0278469691724115, z: 0},
                {x: 3.066213447852494, y: 5.676774870216867, z: 0},

                {x: 3.668936198854243, y: -3.184406757161736, z: 0},
                {x: 5.561676102535683, y: -0.29888638620767294, z: 0},
                {x: 7.454416006217125, y: 2.58663398474639, z: 0},
                {x: 9.347155909898566, y: 5.472154355700453, z: 0},
            ];
            const points = [
                {x: -0.28774762049211333, y: -0.4412129844260258, z: 0},
                {x: -9.495671476239648, y: 6.0860158992496975, z: 0},
                // the value above this comment and below this comment must be exchanged with each other!!
                {x: 3.668936198854243, y: -3.184406757161736, z: 0},
                {x: 9.347155909898566, y: 5.472154355700452, z: 0},
            ];

            const result = Mapper.map(4, points[0], points[1], points[2], points[3]);
            expect(expected).to.be.deep.equal(result);
        });

        it("should shift vertices to other places", () => {
            const expected = [
                {x: -6.541462572520651, y: 0.24938125206688305, z: 0},
                {x: -4.156354518219377, y: 0.935231091969464, z: 0},
                {x: -1.7712464639181036, y: 1.6210809318720447, z: 0},
                {x: 0.6138615903831699, y: 2.3069307717746255, z: 0},

                {x: -5.657386592593279, y: -0.6458334989424406, z: 0},
                {x: -2.958953351533929, y: 0.7199532589886504, z: 0},
                {x: -0.2605201104745791, y: 2.0857400169197415, z: 0},
                {x: 2.4379131305847705, y: 3.451526774850832, z: 0},

                {x: -4.773310612665907, y: -1.5410482499517644, z: 0},
                {x: -1.7615521848484805, y: 0.5046754260078365, z: 0},
                {x: 1.2502062429689453, y: 2.5503991019674377, z: 0},
                {x: 4.261964670786371, y: 4.596122777927039, z: 0},

                {x: -3.889234632738535, y: -2.4362630009610884, z: 0},
                {x: -0.5641510181630323, y: 0.2893975930270227, z: 0},
                {x: 2.76093259641247, y: 3.015058187015134, z: 0},
                {x: 6.086016210987972, y: 5.7407187810032445, z: 0},
            ];

            const points = [
                {x: -6.541462572520651, y: 0.24938125206688305, z: 0},
                {x: 0.6138615903831702, y: 2.3069307717746255, z: 0},
                // the value above this comment and below this comment must be exchanged with each other!!
                {x: -3.889234632738535, y: -2.436263000961088, z: 0},
                {x: 6.086016210987973, y: 5.740718781003245, z: 0},
            ];

            const result = Mapper.map(4, points[0], points[1], points[2], points[3]);
            expect(expected).to.be.deep.equal(result);
        });

        it("you blody bastard solved it :-)", () => {
            const expected = [
                {x: -0.11509904819684433, y: 0.01918317323591573, z: 0},
                {x: -2.7879547229902286, y: -2.1596541900913397, z: 0},
                {x: -5.4608103977836135, y: -4.338491553418596, z: 0},
                {x: -8.133666072576998, y: -6.517328916745852, z: 0},

                {x: 3.358705516159525, y: 0.9143979242452389, z: 0},
                {x: -0.08787153817931292, y: 0.014438776645588791, z: 0},
                {x: -3.5344485925181512, y: -0.8855203709540613, z: 0},
                {x: -6.981025646856989, y: -1.7854795185537113, z: 0},

                {x: 6.832510080515894, y: 1.8096126752545623, z: 0},
                {x: 2.6122116466316028, y: 2.1885317433825175, z: 0},
                {x: -1.608086787252689, y: 2.567450811510473, z: 0},
                {x: -5.82838522113698, y: 2.9463698796384286, z: 0},

                {x: 10.306314644872263, y: 2.7048274262638854, z: 0},
                {x: 5.312294831442518, y: 4.362624710119447, z: 0},
                {x: 0.31827501801277336, y: 6.02042199397501, z: 0},
                {x: -4.675744795416971, y: 7.678219277830571, z: 0},
            ];

            const points = [
                {x: -0.11509904819684433, y: 0.01918317323591573, z: 0},
                {x: -8.133666072576998, y: -6.517328916745852, z: 0},
                {x: 10.306314644872263, y: 2.7048274262638854, z: 0},
                {x: -4.675744795416971, y: 7.6782192778305705, z: 0},
            ];

            const result = Mapper.map(4, points[0], points[1], points[2], points[3]);
            expect(expected).to.be.deep.equal(result);
        });
    });
});
